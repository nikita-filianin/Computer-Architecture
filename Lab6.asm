TITLE ЛР_6 
; ЛР  №6
;------------------------------------------------------------------------------
; Архітектура комп'ютера
; ВУЗ:          КНУУ "КПІ"
; Факультет:    ФІОТ
; Курс:         1
; Група:        ІТ-03
;------------------------------------------------------------------------------
; Автори:       Філянін Чабан Хамад
; Команда:      №6
; Дата:         25/04/2021
;------------------------І.ЗАГОЛОВОК ПРОГРАМИ-----------------------------------------
IDEAL              ; Директива - тип Асемблера tasm
MODEL SMALL        ; Директива - тип моделі пам'яті
STACK 512          ; Директива - розмір стеку
 
;------------------------ІІ.МАКРОСИ---------------------------------------------------
; Ініціалізуємо макроси
; Макрос для ініціалізації
MACRO MInit
    mov ax, @data  ; ax <- @data
    mov ds, ax	   ; ds <- ax	
    mov es, ax	   ; es <- ax	
ENDM MInit         ; Кінець макроса
 
 
;------------------ІІІ.ПОЧАТОК СЕГМЕНТУ ДАНИХ-----------------------------------------
DATASEG

v_offset dw ? 			; Змінна для зміщення
v_seg dw ? 				; Змінна для сегементу
mess db "Group 6:",10,13, "Filianin",10,13, "Chaban",10,13, "Hamad",10,13,'$'
exCode db 0				; Код виходу

;------------------IV.ПОЧАТОК СЕГМЕНТУ КОДУ-------------------------------------------
CODESEG
Start:
MInit							; Виклик макросу
mov di, 56h   					; di <- номер нового переривання (50 + номер бригади)
call getVector					; виклик процедури
mov [v_offset], bx 				; в змінну зміщення старої функції обробки 
mov [v_seg], es 				; в змінну сегмент старої функції обробки

; Значення для процедури
mov di, 56h
mov dx, offset int56h
mov ax, seg int56h
mov es, ax

call setVector					; виклик процедури

int 56h 						; викликаємо наше переривання

; Значення для процедури повернення обробника
mov di, 56h
mov dx, [v_offset]
mov ax, [v_seg]
mov es,ax

call setVector					; виклик процедури

xor al,al						; зачищаємо al

;---------------------------------4. Вихід з програми-----------------------------
	mov ah,4ch					; Завантаження числа 4ch до регістру ah
								; (Функція DOS 4ch - виходу з програми)
	mov al,[exCode] 			; отримання коду виходу
	int 21h 					; виклик функції DOS 4ch
; Призначення: збереження даних функції обробки переривання	
; Вхід: di - номер вектора переривання
; Вихід: bx, es - зміщення та сегмент функції переривання
PROC getVector
; Зберігаємо дані регістрів в стеку
	push ax
	push di
	xor ax,ax 					; в ax 0
	mov es,ax 					; в es 0
	shl di, 2					; DI*4 (зв'язок номера переривання і адреси)
	mov bx, [es:[di]] 			; bx <- зміщення процедури у векторі переривань
	mov ax, [es:[di+2]] 		; es <- сегмент процедури у векторі переривань
	mov es, ax
	
;Повертаємо дані зі стеку
	pop di
	pop ax
	ret ; повертаємось з процедури
ENDP getVector

; Призначення: встановлення на номер вектора переривань нового значення	
; Функціонально: до пам’яті, що відповідає вектору заносимо ефективну адресу і адресу 
; сегменту нового обробника переривань
; Вхід: di - номер вектора переривання, dx - адреса нового обробника, es - адреса сегмента нового обробника
; Вихід: -
PROC setVector
	Cli 						; Заборона апаратних переривань (обнуляє прапор IF)
; Зберігаємо дані регістрів в стеку
	push ax 
	push di
	push ds
	xor ax, ax 					; в ax 0
	mov ds, ax 					; в ds 0, переходимо до адреси 0000h
	shl di, 2 					; DI*4
	mov [ds:[di]], dx 			; Перезаписуємо зміщення у векторі переривань 
	mov [ds:[di+2]], es			; Перезаписуємо адресу сегмента у векторі переривань
;Повертаємо дані зі стеку
	pop ds
	pop di
	pop ax
	sti 						; Дозвіл переривань (встановлює прапор IF у 1)
	ret ; Не забуваємо повернутися з процедури (функції)
ENDP setVector
; Призначення: виводить в консоль фамілії
; Вхід: -
; Вихід: -
PROC int56h
	mov ah, 09h 				; Функція виводу на екран тексту
	mov dx, offset mess 		; рядок для виводу
	int 21h 					; переривання 09h 

; Код для закінчення переривання
	mov al, 20h
	out 20h, al
	
	iret 						; вихід з процедури	
ENDP int56h
end Start