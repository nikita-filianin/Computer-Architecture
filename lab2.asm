;-------------------------------------------------------------------------------------
; ЛР №2
; Архітектура комп'ютера
; Факультет: ФІОТ
; Курс: 1
; Група: ІТ-03
;-------------------------------------------------------------------------------------
; Автори: Філянін, Чабан, Хамад
; Дата: 16.02.2021
;-------------------------------------------------------------------------------------


;----------------ЗАГОЛОВОК ПРОГРАМИ---------------------------------------------------

	IDEAL	; Директива - тип Асемблера TASM
	MODEL small ; Директива - тип моделі пам'яті
	STACK 256 ; Директива - розмір стеку в байтах
	
;----------------------МАКРОСИ--------------------------------------------------------
; Макрос для ініціалізації
MACRO M_Init ; Початок макросу
	mov ax, @data ; ax <- @data
	mov ds, ax ; ds <- ax
	mov es, ax ; es <- ax
ENDM M_Init ; Кінець макросу

;---------------ПОЧАТОК СЕГМЕНТУ ДАНИХ------------------------------------------------

	DATASEG
	
excode db 0

; Одна лінія прямокутника
rect_line db 49h, 17H, 74h, 17H, 27h, 17H, 73h, 17H, 20h, 17H
		db 72h, 17H, 65h, 17H, 76h, 17H, 6fh, 17H, 6ch, 17H
		db 75h, 17H, 74h, 17H, 69h, 17H, 6fh, 17H, 6eh, 17H
		db 20h, 17H, 4ah, 17H, 6fh, 17H, 68h, 17H, 6eh, 17H
		
rect_line_length=$-rect_line ; визначення довжини строки
		
;------------ПОЧАТОК СЕГМЕНТУ КОДУ----------------------------------------------------
	
	CODESEG
	
Start: M_Init
	; використовуємо макрос
;-------------------------------------------------------------------------------------
mov dx, 2480 ; Початок виводу прямокутника, координата верхнього лівого кута 160*y+2*x
			 ; y - кількість рядків зверху, х - кількість символів зліва
			 ; у нашому випадку (х:40; y: 15)
mov ax, 03 ; очистка консолі
int 10h ; переривання BIOS 
mov cx, 10	 ; Лічильник ітерацій 
loopStart:  ; Початок циклу
			; Регістр cx використовується в movsb з префіксом rep
			; зберігаємо значення лічильника в іншому регістрі (bx)
	push cx 	; зберігаємо значення у стеку
	mov ax, 0B800h ; 1. Сегментна адреса відео-пам'яті
	mov es, ax ; 2. До ES

; Налаштування SI, DI і CX для movsb
	mov di, dx; di <- Початок виводу на екран
	mov si, offset rect_line ; Записуємо в si наш рядок
	mov cx, rect_line_length ; Число байтів на пересилання
	cld ; DEF - вперед
	rep movsb ; Записать в ячейку по адресу ES:(E)DI байт из ячейки с адресом DS:(E)SI
	pop cx 	; достаємо зі стеку значення сх
	add dx, 160 ; Зміщення для наступної лінії
LOOP loopStart ; 

Exit:
	mov ah, 04Ch
	mov al, [excode] ; отримання коду на виході
	int 21h ; виклик DOS 4ch
;-------------------------------------------------------------------------------------
END Start
;-------------------------------------------------------------------------------------
